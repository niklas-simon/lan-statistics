name: Tauri Build on Release

on:
  release:
    types: [created]

env:
  IMAGE_NAME: gewuerznud3l/lan-manager

jobs:
  build-windows:
    name: Build Installers
    permissions:
      contents: write
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Cargo Cache
        uses: Swatinem/rust-cache@v2

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.11.0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build Tauri app
        run: pnpm tauri build

      - name: Restore code-signing certificate
        shell: pwsh
        run: |
          [IO.File]::WriteAllBytes("cert.pfx", [Convert]::FromBase64String("${{ secrets.WINDOWS_SIGNING_PFX_B64 }}"))
          $sec = ConvertTo-SecureString "${{ secrets.WINDOWS_SIGNING_PFX_PASSWORD }}" -AsPlainText -Force
          $import = Import-PfxCertificate -FilePath cert.pfx -CertStoreLocation Cert:\CurrentUser\My -Password $sec
          if (-not $import) { throw "Failed to import PFX." }
          $thumb = $import.Thumbprint
          "CERT_THUMBPRINT=$thumb" | Out-File -FilePath $env:GITHUB_ENV -Append
          # Export public certificate (.cer) for publishing
          Export-Certificate -Cert $import -FilePath public.cer | Out-Null

      - name: Sign Windows installers
        shell: pwsh
        run: |
          $signtool = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe" -ErrorAction Stop |
            Sort-Object FullName -Descending | Select-Object -First 1 | % FullName
          if (-not (Test-Path $signtool)) { throw "signtool.exe not found." }

          $timestamp = "http://timestamp.digicert.com"
          $files = Get-ChildItem "src-tauri/target/release/bundle" -Recurse -Include *.exe, *.msi
          if (-not $files) { throw "No installers found to sign." }

          foreach ($f in $files) {
            & $signtool sign `
              /sha1 $env:CERT_THUMBPRINT `
              /fd SHA256 `
              /tr $timestamp `
              /td SHA256 `
              "`$($f.FullName)`"
          }
      
      - name: Generate SHA256SUMS.txt
        shell: pwsh
        run: |
          $artifacts = Get-ChildItem "src-tauri/target/release/bundle" -Recurse -Include *.exe, *.msi
          $lines = foreach ($f in $artifacts) {
            $h = (Get-FileHash -Algorithm SHA256 -Path $f.FullName).Hash
            "{0} *{1}" -f $h, $f.Name
          }
          $lines | Set-Content -Encoding ascii SHA256SUMS.txt

      - name: Upload NSIS installer to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
            public.cer
            SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-server:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,enable=true,branch=main,name=latest
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build & push (linux/arm64)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64,linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max